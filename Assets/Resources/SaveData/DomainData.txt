(define (domain robot-domain)
(:requirements :typing :fluents :durative-actions :numeric-fluents :numeric-effects)
(:types
PType
PathType - ObjType
ManPanelPathType - PathType
HomePathType - PathType
SceneType - PType
ObjType - PType
AnimalType - ObjType
PersonObjType - AnimalType
BedType - ObjType
)
(:predicates
(IsAliveP ?objType-ObjType  )
(In ?x-ObjType ?sceneType-SceneType  )
(Sex ?PersonObjType-AnimalType  )
(HasSelectP ?objType-ObjType  )
(IsUseObjP ?PersonObjType-AnimalType ?objType-ObjType  )
(HasCloth ?PersonObjType-PersonObjType ?objType-ObjType  )
)
(:functions
(NowT  )
(ObjSizeF ?objType-ObjType )
(Money ?objType-ObjType )
(Age ?PersonObjType-AnimalType )
(SleepValF ?objType-ObjType )
(FoodValF ?objType-ObjType )
(FinancialKnowledge ?PersonObjType-PersonObjType )
(ArtKnowledge ?PersonObjType-PersonObjType )
(LanguageKnowledge ?PersonObjType-PersonObjType )
(MedicalKnowledge ?PersonObjType-PersonObjType )
(ManagementKnowledge ?PersonObjType-PersonObjType )
(AgriculturalKnowledge ?PersonObjType-PersonObjType )
(IndustrialKnowledge ?PersonObjType-PersonObjType )
(GeneralHistoryKnowledge ?PersonObjType-PersonObjType )
(Capacity ?objType-ObjType )
(NowCapacity ?objType-ObjType )
)
(:durative-action MainPanel_Home
:parameters(?PersonObj_18-PersonObjType ?MainPanel-SceneType ?Home-SceneType )

:duration(=?duration 1)
:condition(
( at start (In  PersonObj_18  MainPanel )) 
)

:effect(

( at end ( and (In  PersonObj_18  Home ) ( not (In  PersonObj_18  MainPanel ))  )) 
)

)


(:durative-action Home_MainPanel
:parameters(?PersonObj_19-PersonObjType ?Home-SceneType ?MainPanel-SceneType )

:duration(=?duration 1)
:condition(
( at start (In  PersonObj_19  Home )) 
)

:effect(

( at end ( and (In  PersonObj_19  MainPanel ) ( not (In  PersonObj_19  Home ))  )) 
)

)


(:durative-action Sleep
:parameters(?PersonObj_20-PersonObjType ?BedObj_21-BedType )

:duration(=?duration ( > ?duration 0) )
:condition(
( at start ( and ( > (Capacity  ?BedObj_21) (NowCapacity  ?BedObj_21))  ( not (IsUseObjP  PersonObj_20   ))  )) 
)

:effect(

( and ( at end ( assign, (SleepValF  ?PersonObj_20) ( min, ( max, ( + (SleepValF  ?PersonObj_20)  #t)  0)  200) ) )  ( increase (NowT )  #t)  )
)

)


)
