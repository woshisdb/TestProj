{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "dfb594e8-7e4a-47be-a43f-c25723f9ae5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "570\n",
      "Product(goodsNo=52, quality=3.0, trait=0.0, price=507, stock=62)\n",
      "Product(goodsNo=44, quality=0.0, trait=7.0, price=508, stock=60)\n",
      "Product(goodsNo=46, quality=9.0, trait=8.0, price=514, stock=85)\n",
      "Product(goodsNo=9, quality=7.0, trait=0.0, price=542, stock=4)\n",
      "Product(goodsNo=46, quality=9.0, trait=8.0, price=551, stock=92)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import zscore\n",
    "from typing import List, Dict\n",
    "import sqlite3\n",
    "import random\n",
    "from dataclasses import dataclass\n",
    "# 定义数据类\n",
    "@dataclass\n",
    "class Product:\n",
    "    goodsNo: int\n",
    "    quality: float\n",
    "    trait: float\n",
    "    price: int\n",
    "    stock: int\n",
    "# 连接到 SQLite 数据库\n",
    "conn = sqlite3.connect(r'D:\\UProjes\\Assets\\StreamingAssets\\SQLiteData.db')\n",
    "cursor = conn.cursor()\n",
    "\n",
    "money = random.randint(1, 1000)\n",
    "print(money)\n",
    "# 3. 执行联表查询\n",
    "placeholders = ', '.join('?' * len(selected_goods_nos))\n",
    "query = f'''\n",
    "SELECT \n",
    "    g.goodsNo, \n",
    "    g.quality, \n",
    "    g.trait, \n",
    "    p.price, \n",
    "    p.stock \n",
    "FROM \n",
    "    Goods g\n",
    "JOIN \n",
    "    ProductDetails p\n",
    "ON \n",
    "    g.goodsNo = p.goodsNo\n",
    "WHERE \n",
    "    p.price < {money}\n",
    "LIMIT 10\n",
    "'''\n",
    "\n",
    "cursor.execute(query)\n",
    "results = cursor.fetchall()\n",
    "\n",
    "products = [Product(goodsNo=row[0], quality=row[1], trait=row[2], price=row[3], stock=row[4]) for row in results]\n",
    "# 打印结果\n",
    "for product in products:\n",
    "    print(product)\n",
    "\n",
    "def calculate_weighted_score(products: List[Product], weights: Dict[str, float]) -> List[float]:\n",
    "    # 转换产品属性为数组以便于计算\n",
    "    qualities = np.array([p.quality for p in products])\n",
    "    traits = np.array([p.trait for p in products])\n",
    "    prices = np.array([p.price for p in products])\n",
    "    stocks = np.array([p.stock for p in products])\n",
    "\n",
    "    # 进行 Z-score 归一化\n",
    "    z_qualities = zscore(qualities)\n",
    "    z_traits = zscore(traits)\n",
    "    z_prices = zscore(prices)\n",
    "\n",
    "    # 计算加权平均值\n",
    "    weighted_scores = []\n",
    "    for i in range(len(products)):\n",
    "        score = (z_qualities[i] * weights['quality'] +\n",
    "                 z_traits[i] * weights['trait'] +\n",
    "                 z_prices[i] * weights['price'])\n",
    "        weighted_scores.append(score)\n",
    "\n",
    "    return weighted_scores\n",
    "weights = {\n",
    "    'quality': 0.3,\n",
    "    'trait': 0.2,\n",
    "    'price': 0.4,\n",
    "}\n",
    "weighted_scores = calculate_weighted_score(products, weights)\n",
    "for product, score in zip(products, weighted_scores):\n",
    "    print(f'Product {product.goodsNo} - Weighted Score: {score:.2f}')\n",
    "\n",
    "# 关闭数据库连接\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e4b0c8da-7f79-40f1-a0d1-e6559281833f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Product 52 - Weighted Score: -0.84\n",
      "Product 44 - Weighted Score: -0.70\n",
      "Product 46 - Weighted Score: 0.24\n",
      "Product 9 - Weighted Score: 0.26\n",
      "Product 46 - Weighted Score: 1.04\n"
     ]
    }
   ],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88bb68b6-9089-4386-8042-f07f12291b69",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
